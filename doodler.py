# -*- coding: utf-8 -*-
"""doodler.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bYaZ90xMsA66iUm52_wo4A3EeRtb2JmN
"""

!mkdir data

!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/apple.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/pineapple.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/grapes.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/banana.npy

!ls

from sklearn.model_selection import train_test_split as tts
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten
from keras.utils import to_categorical
from random import randint
import numpy as np
import os
from PIL import Image

# define some constants
N_FRUITS = 4
FRUITS = {0: "Apple", 1: "Banana", 2: "Grape", 3: "Pineapple"}

# number of samples to take in each class
N = 5000

# some other constants
N_EPOCHS = 10

# data files in the same order as defined in FRUITS
files = ["apple.npy", "banana.npy", "grapes.npy", "pineapple.npy"]

def load(dir, reshaped, files):
    "Load .npy or .npz files from disk and return them as numpy arrays. \
    Takes in a list of filenames and returns a list of numpy arrays."

    data = []
    for file in files:
        f = np.load(dir + file)
        if reshaped:
            new_f = []
            for i in range(len(f)):
                x = np.reshape(f[i], (28, 28))
                x = np.expand_dims(x, axis=0)
                x = np.reshape(f[i], (28, 28, 1))
                new_f.append(x)
            f = new_f
        data.append(f)
    return data


def normalize(data):
    "Takes a list or a list of lists and returns its normalized form"

    return np.interp(data, [0, 255], [-1, 1])


def denormalize(data):
    "Takes a list or a list of lists and returns its denormalized form"

    return np.interp(data, [-1, 1], [0, 255])


def visualize(array):
    "Visulaze a 2D array as an Image"
    array = np.reshape(array, (28,28))
    img = Image.fromarray(array)
    return img


def set_limit(arrays, n):
    "Limit elements from each array up to n elements and return a single list"
    new = []
    for array in arrays:
        i = 0
        for item in array:
            if i == n:
                break
            new.append(item)
            i += 1
    return new


def make_labels(N1, N2):
    "make labels from 0 to N1, each repeated N2 times"
    labels = []
    for i in range(N1):
        labels += [i] * N2
    return labels

!ls

fruits = load("content/", False, ['banana.npy'])

visualize(fruits[0][90])

#second argument is True for reshaping the image to a 28x28 form. A conv net expects this format.
fruits = load("content/", True, files)




# limit no of samples in each class to N
fruits = set_limit(fruits, N)

# normalize the values
fruits = list(map(normalize, fruits))

# define the labels
labels = make_labels(N_FRUITS, N)

# prepare the data
x_train, x_test, y_train, y_test = tts(fruits, labels, test_size=0.05)

# one hot encoding
Y_train = to_categorical(y_train, N_FRUITS)
Y_test = to_categorical(y_test, N_FRUITS)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28,28,1)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(N_FRUITS, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


# train
model.fit(np.array(x_train), np.array(Y_train), batch_size=32, epochs=N_EPOCHS)

print ("Training complete")

print ("Evaluating model")
preds = model.predict(np.array(x_test))

score = 0
for i in range(len(preds)):
    if np.argmax(preds[i]) == y_test[i]:
        score += 1

print ("Accuracy: ", ((score + 0.0) / len(preds)) * 100)


model.save("/content/drive/MyDrive/fruits"+ ".h5")
print ("Model saved")

from tensorflow.keras.models import load_model
model = load_model("/content/drive/MyDrive/fruits.h5")

import cv2


def predict_draw(img):


    image = cv2.imread(img)
    gray = cv2. cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = np.expand_dims(gray, 2)
    try:
      x = cv2.resize(gray, (28, 28))
      # print(x.shape)
    except:
      pass
    # # resize input image to 28x28
    # x = cv2.resize(image, (28, 28))

    x = np.expand_dims(x, axis=0)
    x = np.reshape(x, (28, 28, 1))
    # invert the colors
    x = np.invert(x)
    # brighten the image by 60%
    for i in range(len(x)):
        for j in range(len(x)):
                if x[i][j] > 50:
                    x[i][j] = min(255, x[i][j] + x[i][j] * 0.60)

    # normalize the values between -1 and 1
    x = normalize(x)
    val = model.predict(np.array([x]))
    pred = FRUITS[np.argmax(val)]
    classes = ["Apple", "Banana", "Grape", "Pineapple"]
    print (pred)
    # print(val)